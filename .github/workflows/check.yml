name: Optimized CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
 
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      run: npm install
      
  test:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Restore dependencies from cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        
    - name: Run tests
      run: npm test 

  build:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Restore dependencies from cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        
    - name: Build project
      run: npm run build
      
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
 
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
  
      - name: Verify files exist
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found!"
            ls -la
            exit 1
          fi
          echo "Files to deploy:"
          ls -la dist/
      - name: Debug info
        run: |
          echo "Secrets:"
          echo "SERVER_IP: ${{ secrets.SERVER_IP != '' && 'SET' || 'NOT SET' }}"
          echo "REMOTE_PATH: ${{ secrets.REMOTE_PATH != '' && 'SET' || 'NOT SET' }}"
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts 2>/dev/null
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SERVER_USER }}@$SERVER_IP echo "SSH connection successful"
  
      - name: Deploy files
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          echo "Deploying files to server..."
          scp -o StrictHostKeyChecking=no -rp dist/* ${{ secrets.SERVER_USER }}@$SERVER_IP:$REMOTE_PATH
          
          echo "Setting permissions..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_IP \
            "chmod -R 755 $REMOTE_PATH"
          
          echo "Restarting service..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_IP \
            "cd $REMOTE_PATH && ./restart.sh"
